"use strict";
function _toConsumableArray(t) {
    if (Array.isArray(t)) {
        for (var e = 0, s = Array(t.length); e < t.length; e++)
            s[e] = t[e];
        return s
    }
    return Array.from(t)
}
var Infinite = {
    grids: [].concat(_toConsumableArray(document.querySelectorAll(".grid"))),
    posts: document.querySelector(".products"),
    init: function t(e) {
        var s = this;
        this.posts && (this.fetchOffset = Math.round(.6 * window.innerHeight),
        this.currentCat = this.posts.dataset.category ? this.posts.dataset.category : "products",
        this.totalPages = this.posts.dataset.pages ? this.posts.dataset.pages : 1,
        this.currentPage = null,
        this.isFetching = !1,
        document.addEventListener("scroll", function() {
            return s.onScroll()
        }),
        document.addEventListener("DOMContentLoaded", function() {
            return s.onLoad()
        })),
        console.log("POSTS : Go!")
    },
    getDocHeight: function t() {
        return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
    },
    inView: function t(e) {
        var s = e.getBoundingClientRect()
          , i = s.top - (window.innerHeight || document.documentElement.clientHeight) / 2 < 0
          , n = s.bottom <= (window.innerHeight || document.documentElement.clientHeight) / 2;
        return i && !n
    },
    onScroll: function t() {
        for (var e = document.documentElement.scrollTop || document.body.scrollTop, s = this.getDocHeight(), i = this.grids, n = 0; n < i.length; ++n) {
            var o = i[n];
            if (this.inView(o) && !o.classList.contains("is-inview")) {
                o.classList.add("is-inview");
                var r = parseInt(o.dataset.page)
                  , c = "products" !== this.currentCat ? "products/" + this.currentCat : "products"
                  , a = "products" !== this.currentCat ? "/" + this.currentCat : "";
                1 === r ? history.pushState(!1, "Home", "" === c ? "/" : a) : history.pushState(!1, "Page " + r, a + "/page:" + r),
                this.currentPage = r,
                this.isFetching = !1
            } else
                !this.inView(o) && o.classList.contains("is-inview") && o.classList.remove("is-inview")
        }
        var u = s - (e + window.innerHeight);
        this.currentPage < this.totalPages && !this.posts.classList.contains("is-loading") ? u < this.fetchOffset && !this.isFetching && (this.isFetching = !0,
        this.posts.classList.add("is-loading"),
        this.fetch()) : this.currentPage == this.totalPages && this.posts.classList.add("has-reached-end")
    },
    fetch: function t() {
        var e = this
          , s = this.currentPage + 1
          , i = "products" !== this.currentCat ? "products/" + this.currentCat : "products"
          , n = "products" !== this.currentCat ? "" + this.currentCat : ""
          , o = "/api/" + i
          , r = new XMLHttpRequest;
        r.open("GET", o + "/page:" + s, !0),
        r.onload = function(t) {
            if (r.status >= 200 && r.status < 400) {
                e.currentPage++,
                e.isFetching = !1,
                e.posts.classList.remove("is-loading"),
                ga("send", "pageview", n + "/page:" + e.currentPage);
                var s = JSON.parse(r.response);
                e.addPosts(s)
            } else
                console.log("Error:", r.response)
        }
        ,
        r.onerror = function() {
            console.log("Error:", r.response)
        }
        ,
        r.send()
    },
    addPosts: function t(e) {
        var s = document.createElement("div")
          , i = e.products;
        s.classList.add("grid"),
        s.setAttribute("data-page", this.currentPage);
        for (var n = 0; n < i.length; n++) {
            var o = i[n];
            if ("content"in document.createElement("template")) {
                var r = document.querySelector("#product")
                  , c = r.content
                  , a = c.querySelector(".post-link")
                  , u = c.querySelector(".post-image")
                  , d = c.querySelector(".post-title")
                  , l = c.querySelector(".post-subtitle-link");
                d.innerHTML = o.name + " - " + o.price,
                l.innerHTML = o.creator.name,
                a.setAttribute("href", o.link),
                l.setAttribute("href", o.creator.site),
                u.setAttribute("srcset", o.images.standard + " 1x, " + o.images.retina + " 2x"),
                u.setAttribute("src", "" + o.images.retina),
                u.setAttribute("alt", o.name + " by " + o.creator.name);
                var h = document.importNode(c, !0);
                s.appendChild(h)
            }
        }
        this.grids.push(s),
        this.posts.appendChild(s)
    },
    onLoad: function t() {
        this.posts.offsetHeight <= window.innerHeight && this.totalPages > 1 && this.onScroll()
    }
}
  , Menu = {
    btn: document.querySelector(".menu-btn"),
    menu: document.querySelector(".menu"),
    header: document.querySelector(".header"),
    init: function t() {
        this.onBtnClick(),
        this.onMenuClick(),
        console.log("MENU : Go!")
    },
    onBtnClick: function t() {
        var e = this;
        this.btn.addEventListener("click", function() {
            e.btn.classList.add("is-active"),
            e.menu.classList.add("is-active"),
            e.header.classList.add("is-active")
        })
    },
    onMenuClick: function t() {
        var e = this;
        this.menu.addEventListener("click", function(t) {
            t.target.classList.contains("is-active") && (e.btn.classList.remove("is-active"),
            e.menu.classList.remove("is-active"),
            e.header.classList.remove("is-active"))
        })
    }
}
  , Invisible = {
    init: function t() {
        Menu.init(),
        Infinite.init(),
        console.log("Is Invisible : We're ready for liftoff!")
    }
};
Invisible.init();
